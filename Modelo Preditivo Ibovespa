pip install --upgrade pip

import tensorflow as tf
import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Dropout
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

df = pd.read_csv('/content/drive/MyDrive/all_bovespa.csv', sep=',')
df

df['data_pregao'] = pd.to_datetime(df['data_pregao'], format='%Y-%m-%d')

df_acao= df [df['sigla_acao'] =='PETR4']
df_acao

df_acao_fec= df_acao[['data_pregao', 'preco_fechamento']]
df_acao_fec

df_acao_fec = df_acao_fec.set_index (pd.DatetimeIndex(df_acao_fec['data_pregao'].values))

df_acao_fec

df_acao_fec.drop('data_pregao', axis=1, inplace=True)
df_acao_fec

plt.figure(figsize=(16,9))
plt.title('Preço de Fechamento')
plt.plot(df_acao_fec['preco_fechamento'])


from google.colab import drive
drive.mount('/content/drive')

qtd_linhas = len(df_acao_fec)
qtd_linhas_treino = round(.70 * qtd_linhas)
qtd_linhas_teste = qtd_linhas - qtd_linhas_treino

scaler = StandardScaler()
df_scaled = scaler.fit_transform(df_acao_fec)

train = df_scaled[:qtd_linhas_treino]
test = df_scaled[qtd_linhas_treino:qtd_linhas_treino+qtd_linhas_teste]

print(len(train), len(test))

def create_df(df, steps=1):
    dataX, dataY = [], []
    for i in range(len(df)-steps-1):
      dataX.append(df[i:(i+steps), 0])
      dataY.append(df[i+steps, 0])
    return np.array(dataX), np.array(dataY)

steps = 15
X_train, Y_train = create_df(train, steps)
X_test, Y_test = create_df(test, steps)

X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

model = Sequential ()
model.add(LSTM(35, return_sequences=True, input_shape= (steps, 1)))
model.add(LSTM(35, return_sequences=True))
model.add(LSTM(35))
model.add(Dropout(0.2))
model.add(Dense(1))


model.compile(optimizer= 'adam', loss='mse')
model.summary()

validation = model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=100, batch_size=15, verbose=2)

plt.plot(validation.history['loss'], label='Erro de Treinamento')
plt.plot(validation.history['val_loss'], label= 'Erro de Validação')
plt.legend()

#Previsão
prev= model.predict(X_test)
prev= scaler.inverse_transform(prev)
prev

#Previsão para os próximos 10 dias
lenght_test= (len(test))
lenght_test

days_input_steps= lenght_test - steps
days_input_steps

input_steps = test[days_input_steps:]
input_steps = np.array(input_steps).reshape(1,-1)
input_steps

list_output_steps = list(input_steps)
list_output_steps = list_output_steps[0].tolist()
list_output_steps

pred_output=[]
i=0
n_future=10
while(i<n_future):

    if(len(list_output_steps)>steps):
      input_steps = np.array(list_output_steps[1:])
      print("{} dia. Valores de Entrada ->{}" .format(i,input_steps) )
      input_steps = input_steps.reshape(1,-1)
      input_steps = input_steps.reshape((1, steps, 1))
      pred = model.predict(input_steps, verbose=0)
      print("{} dia. Valor Previsto -> {}" .format(i, pred))
      list_output_steps.extend(pred[0].tolist())
      list_output_steps=list_output_steps[1:]
      pred_output.extend(pred.tolist())
      i=i+1
    else:
      input_steps = input_steps.reshape((1, steps, 1))
      pred = model.predict(input_steps, verbose=0)
      print(pred[0])
      list_output_steps.extend(pred[0].tolist())
      print(len(list_output_steps))
      pred_output.extend(pred.tolist())
      i=i+1

print(pred_output)



prev = scaler.inverse_transform(pred_output)
prev = np.array(prev).reshape(1,-1)
list_output_prev = list(prev)
list_output_prev = prev[0].tolist()
list_output_prev

dates= pd.to_datetime(df_acao['data_pregao'])
predict_dates = pd.date_range(list(dates)[-1] + pd.DateOffset(1), periods=10, freq='b').tolist()
predict_dates

##Dataframe de Previsão
forecast_dates = []
for i in predict_dates:
  forecast_dates.append(i.date())

df_forecast = pd.DataFrame({'data_pregao': np.array(forecast_dates), 'preco_fechamento':list_output_prev})
df_forecast['data_pregao'] = pd.to_datetime(df_forecast['data_pregao'])

df_forecast=df_forecast.set_index(pd.DatetimeIndex(df_forecast['data_pregao'].values))
df_forecast.drop('data_pregao', axis=1, inplace=True)
df_forecast

df_acao= df[ (df['sigla_acao']== 'BBAS3') & (df['data_pregao'] >'2022-10-01')]
df_acao_fec = df_acao[['data_pregao', 'preco_fechamento']]
df_acao_fec=df_acao_fec.set_index(pd.DatetimeIndex(df_acao_fec['data_pregao'].values))
df_acao_fec.drop('data_pregao', axis=1, inplace=True)
df_acao_fec

#Grafico
plt.figure(figsize=(16,8))
plt.plot(df_acao_fec['preco_fechamento'])
plt.plot(df_forecast['preco_fechamento'])
plt.legend(['Preço de Fechamento', 'Preço Previsto'])
plt.show()
